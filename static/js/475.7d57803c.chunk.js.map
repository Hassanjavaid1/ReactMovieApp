{"version":3,"file":"static/js/475.7d57803c.chunk.js","mappings":"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","sources":["components/RecoMovie.js","components/MovieDetail.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { img_url, fetchData } from \"../App\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { Base_Url, Api_Key } from \"../App\";\r\nimport placeholder from \"../Photos/movie_placeholder.png\";\r\n\r\nexport default function RecoMovie({ movieDetail }) {\r\n  const { id } = useParams();\r\n  const [RecoMovies, setRecoMovies] = useState([]);\r\n  const [VideoNotAvaliable, setVideoNotAvaliable] = useState(\r\n    \"Related Videos Not Available!\"\r\n  );\r\n  const [RecoVideoNotAvaliable, setRecoNotAvaliable] = useState(\r\n    \"No Recommended Video Found!\"\r\n  );\r\n  const getRecoMovies = async () => {\r\n    let url = `https://api.themoviedb.org/3/movie/${id}/recommendations?api_key=6758043f0537fea4f9c2c4e1534a395a`;\r\n    let data = await fetchData(url);\r\n    setRecoMovies(data.results);\r\n  };\r\n  const getMovieVideos = async () => {\r\n    const url = `${Base_Url}/movie/${id}/videos?${Api_Key}`;\r\n    const data = await fetchData(url);\r\n  };\r\n  useEffect(() => {\r\n    getRecoMovies();\r\n    getMovieVideos();\r\n  }, []);\r\n  const videoKeys = [\"video_key_1\"];\r\n  const videoKey = movieDetail?.videos?.results[0]?.key;\r\n  const name = movieDetail?.videos?.results[0]?.name.slice(0, 23);\r\n\r\n  const videoKey2 = movieDetail?.videos?.results[1]?.key;\r\n  const name2 = movieDetail?.videos?.results[1]?.name.slice(0, 23);\r\n  const videoKey3 = movieDetail?.videos?.results[2]?.key;\r\n  const name3 = movieDetail?.videos?.results[2]?.name.slice(0, 23);\r\n  const videoKey4 = movieDetail?.videos?.results[3]?.key;\r\n  const name4 = movieDetail?.videos?.results[3]?.name.slice(0, 23);\r\n\r\n  return (\r\n    <>\r\n      <div id=\"officialVideos\">\r\n        <h1 id=\"movie_related_title\">Movie Related Videos!</h1>\r\n        <div className=\"video-related-container\">\r\n          {videoKey === \"\" || videoKey == null ? (\r\n            <h1 id=\"video_not_found\">{VideoNotAvaliable}</h1>\r\n          ) : (\r\n            <>\r\n              <div className=\"flex_direction\">\r\n                {videoKeys.map((index) => (\r\n                  <iframe\r\n                    key={index}\r\n                    className=\"custom-video-player\"\r\n                    src={`https://www.youtube.com/embed/${videoKey}?autoplay=1&controls=1&modestbranding=1&showinfo=0`}\r\n                    title=\"Official Movie Trailer\"\r\n                    frameBorder=\"0\"\r\n                    allow=\"encrypted-media\"\r\n                    rel=\"0\"\r\n                    allowFullScreen\r\n                  ></iframe>\r\n                ))}\r\n                <h1 id=\"video_name\">{name + \"...\"}</h1>\r\n              </div>\r\n              <div className=\"video-related-container\">\r\n                <div className=\"flex_direction\">\r\n                  {videoKeys.map((index1) => (\r\n                    <iframe\r\n                      key={index1}\r\n                      className=\"custom-video-player\"\r\n                      src={`https://www.youtube.com/embed/${videoKey2}?autoplay=1&controls=1`}\r\n                      title={`Movie Trailer`}\r\n                      frameBorder=\"0\"\r\n                      allow=\"encrypted-media\"\r\n                      allowFullScreen\r\n                    ></iframe>\r\n                  ))}\r\n                  <h1 id=\"video_name\">{name2 + \"...\"}</h1>\r\n                </div>\r\n              </div>\r\n              <div className=\"video-related-container\">\r\n                <div className=\"flex_direction\">\r\n                  {videoKeys.map((index2) => (\r\n                    <iframe\r\n                      key={index2}\r\n                      className=\"custom-video-player\"\r\n                      src={`https://www.youtube.com/embed/${videoKey3}?autoplay=1&controls=1`}\r\n                      title={`Movie Trailer`}\r\n                      frameBorder=\"0\"\r\n                      allow=\"encrypted-media\"\r\n                      allowFullScreen\r\n                    ></iframe>\r\n                  ))}\r\n                  <h1 id=\"video_name\">{name3 + \"...\"}</h1>\r\n                </div>\r\n              </div>\r\n              <div className=\"video-related-container\">\r\n                <div className=\"flex_direction\">\r\n                  {videoKeys.map((index3) => (\r\n                    <iframe\r\n                      key={index3}\r\n                      className=\"custom-video-player\"\r\n                      src={`https://www.youtube.com/embed/${videoKey4}?autoplay=0&controls=1`}\r\n                      title={`Movie Trailer`}\r\n                      frameBorder=\"0\"\r\n                      allow=\"autoplay; encrypted-media\"\r\n                      allowFullScreen\r\n                      width=\"560\"\r\n                      height=\"315\"\r\n                    ></iframe>\r\n                  ))}\r\n\r\n                  <h1 id=\"video_name\">{name4 + \"...\"}</h1>\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n      {/* <div id=\"RecoMoviess\">\r\n        <h2 className=\"heading\">You May Also Like!</h2>\r\n        {RecoMovies === null ||\r\n        RecoMovies === undefined ||\r\n        RecoMovies.length === 0 ? (\r\n          RecoVideoNotAvaliable\r\n        ) : (\r\n          <div className=\"mainContent\">\r\n            {RecoMovies.map(\r\n              ({ title, poster_path, vote_average, release_date, id }) => (\r\n                <div id=\"RecoMoviesdirection\">\r\n                  <>\r\n                    <Link to={`/moviedetail/${id}`}>\r\n                      <img\r\n                        className=\"movie_img_reco\"\r\n                        src={\r\n                          poster_path == null ||\r\n                          poster_path === undefined ||\r\n                          poster_path === \"\"\r\n                            ? placeholder\r\n                            : img_url + poster_path\r\n                        }\r\n                        alt=\"\"\r\n                      />\r\n                    </Link>\r\n                    <div className=\"title-reco\">\r\n                      <h3 className=\"reco_title\">\r\n                        {String(title).slice(0, 19) + \"...\"}\r\n                      </h3>\r\n                    </div>\r\n                    <div className=\"reco_rating_date\">\r\n                      <div className=\"reco_rating\">\r\n                        <i\r\n                          className=\"fa-sharp fa-solid fa-star\"\r\n                          style={{ color: \"#e4ff1a\" }}\r\n                        ></i>\r\n                        {vote_average.toFixed(1)}\r\n                      </div>\r\n                      <span className=\"reco_release_date\">\r\n                        {parseInt(release_date)}\r\n                      </span>\r\n                    </div>\r\n                  </>\r\n                </div>\r\n              )\r\n            )}\r\n          </div>\r\n        )}\r\n      </div> */}\r\n    </>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport \"./CSS/MovieDetail.css\";\r\nimport RecoMovie from \"../components/RecoMovie\";\r\nimport \"./CSS/MediaMovieDetail.css\";\r\nimport \"../components/CSS/SideMedia.css\";\r\nimport \"../components/CSS/Navbar.css\";\r\nimport { img_url, fetchData, Api_Key, Base_Url } from \"../App\";\r\n\r\nimport { useParams } from \"react-router-dom\";\r\nimport Slider from \"react-slick\";\r\nexport default function MovieDetail() {\r\n  const [movieDetail, setmovieDetail] = useState(\"\");\r\n  const [movieTrailer, setmovieTrailer] = useState(\"\");\r\n  const [TrailerNotAvaliable, setTrailerNotAvaliable] = useState(\"\");\r\n  const [isVideoPlay, setisVideoPaly] = useState(false);\r\n  const [isBackgroundBlur, setisBackgroundBlur] = useState(false);\r\n  const { id } = useParams();\r\n  const getMovieDetail = async () => {\r\n    let url = `https://api.themoviedb.org/3/movie/${id}?api_key=6758043f0537fea4f9c2c4e1534a395a&append_to_response=casts,crew,videos,images,releases`;\r\n    let data = await fetchData(url);\r\n    setmovieDetail(data);\r\n  };\r\n  //Getting Movie tralier\r\n  const getMovieTrailer = async () => {\r\n    const url = `${Base_Url}/movie/${id}/videos?${Api_Key}`;\r\n    const data = await fetchData(url);\r\n\r\n    const officialTrailer = data.results.find(\r\n      (video) => video.type === \"Trailer\"\r\n    );\r\n    if (officialTrailer) {\r\n      setmovieTrailer(officialTrailer.key);\r\n    } else {\r\n      setTrailerNotAvaliable(\"Oops! Movie Tralier is not Avaliable!\");\r\n    }\r\n  };\r\n  const watchTrailer = () => {\r\n    setisVideoPaly(true);\r\n    setisBackgroundBlur(true);\r\n    getMovieTrailer();\r\n  };\r\n  const handleExitClick = () => {\r\n    setisVideoPaly(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getMovieDetail();\r\n  }, []);\r\n\r\n  \r\n  var settings = {\r\n    dots: true,\r\n    infinite: true,\r\n    speed: 500,\r\n    slidesToShow: 1,\r\n    slidesToScroll: 1\r\n  };\r\n\r\n  const img_base_url = \"https://image.tmdb.org/t/p/w500\";\r\n  const cast_profile_url = \"https://image.tmdb.org/t/p/original/\";\r\n  const rating = Number(movieDetail.vote_average);\r\n  return (\r\n    <>\r\n      <artical className=\"movie-detail\">\r\n        <div\r\n          className=\"background_image\"\r\n          style={{\r\n            backgroundImage: `url(${img_base_url + movieDetail.backdrop_path})`,\r\n          }}\r\n        >\r\n          <div className=\"brightness\">\r\n            <figure id=\"movie_poster_detail\">\r\n              <img\r\n                src={img_url + movieDetail.poster_path}\r\n                className=\"movie_image_detail\"\r\n                alt={movieDetail.title}\r\n              />\r\n              <div className=\"movie_detail\">\r\n                <h1 className=\"heading\">{movieDetail.title}</h1>\r\n                <div className=\"spancontent\">\r\n                  <span className=\"movierating\">\r\n                    <i\r\n                      className=\"fa-sharp fa-solid fa-star\"\r\n                      style={{ color: \"#e4ff1a\", display: \"inline\" }}\r\n                    ></i>\r\n                    {rating.toFixed(1)}\r\n                  </span>\r\n                  <span className=\"movie_length\">{movieDetail.runtime}m</span>\r\n                  <span className=\"movie_releasedate_detail\">\r\n                    {parseInt(movieDetail.release_date)}\r\n                  </span>\r\n                </div>\r\n                {movieDetail.genres?.map(({ name }) => (\r\n                  <span id=\"genre_filter\">{name + \" \"}</span>\r\n                ))}\r\n                <h1 id=\"overview_title\">Overview</h1>\r\n                <p className=\"overview_detail\">\r\n                  {String(movieDetail.overview).slice(0, 400)}\r\n                </p>\r\n                <p className=\"Director\">\r\n                  <span id=\"word\">Directed by:</span>\r\n                  {movieDetail.casts?.crew.slice(0, 2).map(({ id, name }) => (\r\n                    <span id=\"Director_span\" key={id}>\r\n                      {`${name} , `}\r\n                    </span>\r\n                  ))}\r\n                  ...\r\n                </p>\r\n\r\n                {isVideoPlay ? (\r\n                  <div id=\"movieTralier\">\r\n                    <div\r\n                      className={`mainVideoContent ${\r\n                        movieTrailer ? \"open\" : \"\"\r\n                      }`}\r\n                    >\r\n                      <button className=\"exit-button\" onClick={handleExitClick}>\r\n                        X\r\n                      </button>\r\n                      <iframe\r\n                        className=\"custom-tralier-player\"\r\n                        src={`https://www.youtube.com/embed/${movieTrailer}?autoplay=1&controls=1&modestbranding=1&showinfo=0`}\r\n                        title={movieTrailer.title}\r\n                        allow=\"encrypted-media\"\r\n                        rel=\"0\"\r\n                        allowFullScreen\r\n                      ></iframe>\r\n                    </div>\r\n                    <span id=\"notAvaliable\">{TrailerNotAvaliable}</span>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"videoBtn\">\r\n                    <div className=\"play-btn\" onClick={watchTrailer}></div>\r\n                    <span id=\"watchtralir\">Watch Traliar!</span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </figure>\r\n            <div id=\"top_cast\">\r\n              <h1 id=\"cast_title\">Top Cast!</h1>\r\n              <div id=\"castdetail\">\r\n                <Slider {...settings}>\r\n                {movieDetail.casts?.cast.map(({ profile_path, name, character }) => (\r\n                    <div className=\"movie_direction\">\r\n                      <img\r\n                        src={cast_profile_url + profile_path}\r\n                        alt=\"\"\r\n                        id=\"cast_img\"\r\n                      />\r\n                      <div id=\"cast_name\">{name}</div>\r\n                      <div id=\"acting_name\">\r\n                        {character.slice(0, 10) + \"...\"}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                  </Slider>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <RecoMovie movieDetail={movieDetail} key={id}/>\r\n        </div>\r\n      </artical>\r\n    </>\r\n  );\r\n}\r\n"],"names":["RecoMovie","_ref","_movieDetail$videos","_movieDetail$videos$r","_movieDetail$videos2","_movieDetail$videos2$","_movieDetail$videos3","_movieDetail$videos3$","_movieDetail$videos4","_movieDetail$videos4$","_movieDetail$videos5","_movieDetail$videos5$","_movieDetail$videos6","_movieDetail$videos6$","_movieDetail$videos7","_movieDetail$videos7$","_movieDetail$videos8","_movieDetail$videos8$","movieDetail","id","useParams","_useState","useState","_useState2","_slicedToArray","setRecoMovies","_useState3","_useState4","VideoNotAvaliable","_useState5","_useState6","getRecoMovies","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","data","wrap","_context","prev","next","concat","fetchData","sent","results","stop","apply","arguments","getMovieVideos","_ref3","_callee2","_context2","Base_Url","Api_Key","useEffect","videoKeys","videoKey","videos","key","name","slice","videoKey2","name2","videoKey3","name3","videoKey4","name4","_jsx","_Fragment","children","_jsxs","className","map","index","src","title","frameBorder","allow","rel","allowFullScreen","index1","index2","index3","width","height","MovieDetail","_movieDetail$genres","_movieDetail$casts","_movieDetail$casts2","setmovieDetail","movieTrailer","setmovieTrailer","TrailerNotAvaliable","setTrailerNotAvaliable","_useState7","_useState8","isVideoPlay","setisVideoPaly","_useState9","_useState10","setisBackgroundBlur","getMovieDetail","getMovieTrailer","officialTrailer","find","video","type","rating","Number","vote_average","style","backgroundImage","backdrop_path","img_url","poster_path","alt","color","display","toFixed","runtime","parseInt","release_date","genres","String","overview","casts","crew","_ref4","onClick","Slider","_objectSpread","dots","infinite","speed","slidesToShow","slidesToScroll","cast","_ref5","profile_path","character"],"sourceRoot":""}